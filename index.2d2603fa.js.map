{"mappings":"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","sources":["<anon>","src/main.ts","src/themeSwitcher.ts"],"sourcesContent":["/*\n * Theme switcher\n *\n * Pico.css - https://picocss.com\n * Copyright 2019-2021 - Licensed under MIT\n */ /**\n * This file was modified from its original form but the original\n * copyright is to be maintained.\n */ const $55275d424e1f83c9$export$ea9d603f8b43b010 = {\n    // Config\n    _scheme: \"auto\",\n    buttonsTarget: \".theme-switcher\",\n    // Init\n    init () {\n        this.scheme = this._scheme;\n        this.initSwitchers();\n    },\n    // Prefered color scheme\n    get preferedColorScheme () {\n        return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n    },\n    // Init switchers\n    initSwitchers () {\n        const buttons = document.querySelectorAll(this.buttonsTarget);\n        buttons.forEach((el)=>{\n            el.addEventListener(\"click\", ()=>{\n                this.scheme == \"dark\" ? this.scheme = \"light\" : this.scheme = \"dark\";\n                el.setAttribute(\"aria-checked\", `${el.checked}`);\n            }, false);\n            el.checked = this._scheme === \"dark\";\n            el.setAttribute(\"aria-checked\", `${el.checked}`);\n        });\n    },\n    // Set scheme\n    set scheme (scheme){\n        if (scheme == \"auto\") this.preferedColorScheme == \"dark\" ? this._scheme = \"dark\" : this._scheme = \"light\";\n        else if (scheme == \"dark\" || scheme == \"light\") this._scheme = scheme;\n        this.applyScheme();\n    },\n    // Get scheme\n    get scheme () {\n        return this._scheme;\n    },\n    // Apply scheme\n    applyScheme () {\n        var _document_querySelector;\n        (_document_querySelector = document.querySelector(\"html\")) === null || _document_querySelector === void 0 ? void 0 : _document_querySelector.setAttribute(\"data-theme\", this.scheme);\n    }\n};\nvar $55275d424e1f83c9$export$2e2bcd8739ae039 = $55275d424e1f83c9$export$ea9d603f8b43b010;\n\n\nconst $04177131cda29cd1$var$osLookup = {\n    linux: \"Linux\",\n    darwin: \"macOS\",\n    windows: \"Windows\"\n};\nlet $04177131cda29cd1$var$latestRelease;\nasync function $04177131cda29cd1$var$getLatestVersion() {\n    const resp = await fetch(\"https://api.github.com/repos/pulumi-desktop/app/releases/latest\");\n    if (resp.status !== 200) throw new Error(`response does not indicate a success: ${resp.statusText}`);\n    $04177131cda29cd1$var$latestRelease = await resp.json();\n}\nfunction $04177131cda29cd1$var$enableDownloadButtons() {\n    if (!$04177131cda29cd1$var$latestRelease) return;\n    const buttons = document.getElementsByClassName(\"download-btn\");\n    for(let i = 0; i < buttons.length; i++){\n        const btn = buttons[i];\n        const os = btn.dataset.os;\n        const arch = btn.dataset.arch;\n        let releaseAsset;\n        switch(os){\n            case \"linux\":\n                releaseAsset = $04177131cda29cd1$var$latestRelease.assets.find((a)=>a.name.endsWith(\"tar.gz\"));\n                break;\n            case \"darwin\":\n                if (arch) releaseAsset = $04177131cda29cd1$var$latestRelease.assets.find((a)=>a.name.includes(arch) && a.name.endsWith(\"dmg\"));\n                else // TODO: Temporary hack until all release assets have the architecture in their names.\n                releaseAsset = $04177131cda29cd1$var$latestRelease.assets.find((a)=>!a.name.includes(\"arm64\") && a.name.endsWith(\"dmg\"));\n                break;\n            case \"windows\":\n                releaseAsset = $04177131cda29cd1$var$latestRelease.assets.find((a)=>a.name.endsWith(\"exe\"));\n                break;\n            default:\n                throw new Error(`Unknown OS type ${os}`);\n        }\n        if (releaseAsset) {\n            btn.href = releaseAsset.browser_download_url;\n            btn.removeAttribute(\"disabled\");\n            const versionTooltip = `Version ${$04177131cda29cd1$var$latestRelease.tag_name}`;\n            const versionTooltipClassName = \"version-tooltip-target\";\n            if (btn.classList.contains(versionTooltipClassName)) btn.dataset.tooltip = versionTooltip;\n            else {\n                const el = document.querySelector(`.${os}.${versionTooltipClassName}`);\n                if (!el) {\n                    console.warn(\"Did not find a target el for the version tooltip\");\n                    return;\n                }\n                el.dataset.tooltip = versionTooltip;\n            }\n        }\n    }\n}\nif (!window.fetch) console.error(\"Browser does not support fetch!\");\nelse $04177131cda29cd1$var$getLatestVersion().then(()=>$04177131cda29cd1$var$enableDownloadButtons()).catch((err)=>console.error(\"Failed to fetch the latest version\", err));\n(0, $55275d424e1f83c9$export$2e2bcd8739ae039).init();\n\n\n//# sourceMappingURL=index.2d2603fa.js.map\n","import themeSwitcher from \"./themeSwitcher\";\n\ninterface ReleaseAsset {\n    created_at: string;\n    updated_at: string;\n    browser_download_url: string;\n    name: string;\n}\n\ninterface GitHubRelease {\n    /**\n     * The name of the release when the release was published.\n     */\n    name: string;\n    url: string;\n    tag_name: string;\n    assets: ReleaseAsset[];\n}\n\nconst osLookup = {\n    linux: \"Linux\",\n    darwin: \"macOS\",\n    windows: \"Windows\",\n};\n\nlet latestRelease: GitHubRelease | undefined;\n\nasync function getLatestVersion() {\n    const resp = await fetch(\"https://api.github.com/repos/pulumi-desktop/app/releases/latest\");\n    if (resp.status !== 200) {\n        throw new Error(`response does not indicate a success: ${resp.statusText}`);\n    }\n    latestRelease = await resp.json();\n}\n\nfunction enableDownloadButtons() {\n    if (!latestRelease) {\n        return;\n    }\n\n    const buttons = document.getElementsByClassName(\"download-btn\");\n    for (let i = 0; i < buttons.length; i++) {\n        const btn = buttons[i] as HTMLAnchorElement;\n        const os = btn.dataset.os;\n        const arch = btn.dataset.arch;\n        let releaseAsset: ReleaseAsset | undefined;\n        switch (os) {\n            case \"linux\":\n                releaseAsset = latestRelease.assets.find((a) => a.name.endsWith(\"tar.gz\"));\n                break;\n            case \"darwin\":\n                if (arch) {\n                    releaseAsset = latestRelease.assets.find((a) => a.name.includes(arch) && a.name.endsWith(\"dmg\"));\n                } else {\n                    // TODO: Temporary hack until all release assets have the architecture in their names.\n                    releaseAsset = latestRelease.assets.find(\n                        (a) => !a.name.includes(\"arm64\") && a.name.endsWith(\"dmg\")\n                    );\n                }\n                break;\n            case \"windows\":\n                releaseAsset = latestRelease.assets.find((a) => a.name.endsWith(\"exe\"));\n                break;\n            default:\n                throw new Error(`Unknown OS type ${os}`);\n        }\n\n        if (releaseAsset) {\n            btn.href = releaseAsset.browser_download_url;\n            btn.removeAttribute(\"disabled\");\n            const versionTooltip = `Version ${latestRelease.tag_name}`;\n            const versionTooltipClassName = \"version-tooltip-target\";\n            if (btn.classList.contains(versionTooltipClassName)) {\n                btn.dataset.tooltip = versionTooltip;\n            } else {\n                const el = document.querySelector(`.${os}.${versionTooltipClassName}`) as HTMLElement;\n                if (!el) {\n                    console.warn(\"Did not find a target el for the version tooltip\");\n                    return;\n                }\n                el.dataset.tooltip = versionTooltip;\n            }\n        }\n    }\n}\n\nif (!window.fetch) {\n    console.error(\"Browser does not support fetch!\");\n} else {\n    getLatestVersion()\n        .then(() => enableDownloadButtons())\n        .catch((err: any) => console.error(\"Failed to fetch the latest version\", err));\n}\n\nthemeSwitcher.init();\n\nexport {};\n","/*\n * Theme switcher\n *\n * Pico.css - https://picocss.com\n * Copyright 2019-2021 - Licensed under MIT\n */\n\n/**\n * This file was modified from its original form but the original\n * copyright is to be maintained.\n */\n\ntype Theme = \"auto\" | \"dark\" | \"light\";\n\nexport const themeSwitcher = {\n    // Config\n    _scheme: \"auto\",\n    buttonsTarget: \".theme-switcher\",\n\n    // Init\n    init() {\n        this.scheme = this._scheme;\n        this.initSwitchers();\n    },\n\n    // Prefered color scheme\n    get preferedColorScheme(): Theme {\n        return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n    },\n\n    // Init switchers\n    initSwitchers() {\n        const buttons = document.querySelectorAll(this.buttonsTarget);\n        buttons.forEach((el: HTMLInputElement) => {\n            el.addEventListener(\n                \"click\",\n                () => {\n                    this.scheme == \"dark\" ? (this.scheme = \"light\") : (this.scheme = \"dark\");\n                    el.setAttribute(\"aria-checked\", `${el.checked}`);\n                },\n                false\n            );\n\n            el.checked = this._scheme === \"dark\";\n            el.setAttribute(\"aria-checked\", `${el.checked}`);\n        });\n    },\n\n    // Set scheme\n    set scheme(scheme: Theme) {\n        if (scheme == \"auto\") {\n            this.preferedColorScheme == \"dark\" ? (this._scheme = \"dark\") : (this._scheme = \"light\");\n        } else if (scheme == \"dark\" || scheme == \"light\") {\n            this._scheme = scheme;\n        }\n        this.applyScheme();\n    },\n\n    // Get scheme\n    get scheme() {\n        return this._scheme;\n    },\n\n    // Apply scheme\n    applyScheme() {\n        document.querySelector(\"html\")?.setAttribute(\"data-theme\", this.scheme);\n    },\n};\n\nexport default themeSwitcher;\n"],"names":["$04177131cda29cd1$var$latestRelease","$04177131cda29cd1$var$getLatestVersion","resp","fetch","status","Error","statusText","json","window","then","$04177131cda29cd1$var$enableDownloadButtons","buttons","document","getElementsByClassName","i","length","releaseAsset","btn","os","dataset","arch","assets","find","a","name","endsWith","includes","href","browser_download_url","removeAttribute","versionTooltip","tag_name","versionTooltipClassName","classList","contains","tooltip","el","querySelector","console","warn","catch","err","error","_scheme","buttonsTarget","init","scheme","initSwitchers","preferedColorScheme","matchMedia","matches","querySelectorAll","forEach","addEventListener","setAttribute","checked","applyScheme","_document_querySelector"],"version":3,"file":"index.2d2603fa.js.map"}